--[[
This header can not be removed

Copyright Newfangled Solutions (c) 2018 All Rights Reserved, www.machsupport.com  

THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, 
EITHER EXPRESSED OR IMPLIED , INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES 
OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.

Author - Newfangled Solutions
Liscence - mit
Date - 05/17/2018
Modified - Brett Price 05/17/2018
--]]

--This is an example for a pendant that uses inputs 10 - 19 to select which axis to jog and what the step size will be for each pulse of an MPG.
--It also uses output 10 as an indicator for letting the operator know Pendant jog is enabled. 

--Screen Load Script
-- These simply run the Pendant function if their state changes.
[mc.ISIG_INPUT10] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT11] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT12] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT13] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT14] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT15] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT16] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT17] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT18] = function (state)
    Pendant()
end,

[mc.ISIG_INPUT19] = function (state)
    Pendant()
end

}

---------------------------------------------------------------
-- Pendant function.
---------------------------------------------------------------
function Pendant()
	local hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT10)
	local XSelection, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT11)
	local YSelection, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT12)
	local ZSelection, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT13)
	local ASelection, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT14)
	local Step001, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT15)
	local Step010, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT16)
	local Step100, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT17)
	local PenStop, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT18)
	local BSelection, rc = mc.mcSignalGetState(hSig)
	hSig, rc = mc.mcSignalGetHandle(inst, mc.ISIG_INPUT19)
	local CSelection, rc = mc.mcSignalGetState(hSig)
	local PenJogOn, rc = mc.mcSignalGetHandle(inst, mc.OSIG_OUTPUT10)
	
	mc.mcSignalSetState(PenJogOn, 1)
	if XSelection == 1 then
		mc.mcMpgSetAxis(inst, 0, 0) --X Axis
		mc.mcCntlSetLastError(inst, "X Selected")
	elseif YSelection == 1 then
		mc.mcMpgSetAxis(inst, 0, 1) --Y Axis
		mc.mcCntlSetLastError(inst, "Y Selected")
	elseif ZSelection == 1 then
		mc.mcMpgSetAxis(inst, 0, 2) --Z Axis
		mc.mcCntlSetLastError(inst, "Z Selected")
	elseif ASelection == 1 then
		mc.mcMpgSetAxis(inst, 0, 3) --A Axis
		mc.mcCntlSetLastError(inst, "A Selected")
	elseif BSelection == 1 then
		mc.mcMpgSetAxis(inst, 0, 4) --B Axis
		mc.mcCntlSetLastError(inst, "B Selected")
	elseif CSelection == 1 then
		mc.mcMpgSetAxis(inst, 0, 5) --C Axis
		mc.mcCntlSetLastError(inst, "C Selected")
	else
		mc.mcMpgSetAxis(inst, 0, -1) --No Axis
		mc.mcCntlSetLastError(inst, "No Axis Selected")
		mc.mcSignalSetState(PenJogOn, 0)
	end
	
	if Step001 == 1 then
		mc.mcMpgSetInc(inst, 0, .001)
	elseif Step010 == 1 then
		mc.mcMpgSetInc(inst, 0, .010)
	elseif Step100 == 1 then
		mc.mcMpgSetInc(inst, 0, .100)
	end
	
	if PenStop == 1 then
		mc.mcCntlEStop(inst)
	end
end
